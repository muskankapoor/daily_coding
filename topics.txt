1.	Sorting, STL (sets, maps, unordered set/map, vector, sort) 
Quick Sort, Merge Sort,  Insertion Sort, Bucket Sort, Selection sort
2.	Data Structures - (Linked Lists, double linked list, array, stacks, queues, BITuseful, 
Segment Tree - asked in Google), graphs, Trees, Tries, HashMaps, HashSets,
3.	Dynamic Programming - (medium level problems, all companies ask)
4.	Divide and Conquer
5.	Searches: Binary Search, Depth First Search, Breadth First Search
6.	Binary Trees & BST - super important! (All companies ask this)
7.	Graphs (Dijsktra and flows are rarely asked)
8.	Dynamic porgrammingP on Trees (yes, an important topic)
9.	String Matching (important, KMP, Z-Algorithm, etc)
10.	Algorithms: Greedy Algorithms.Greedy, Backtracking - (Important, can be tricky)

10. Math Concepts like Prime Seive - Not that much important
11. Bitmask DP - sometimes asked in interviews
Bit-wise Operators
Big O notations


Use Leetcode to Practice: To practice coding problems, check out Leetcode. Focus on these topics: string manipulation, linked lists, doubly linked lists, hash tables, trees, queues, stacks, depth-first search, breadth-first-search, basic graphs, basic complexity.
Check Glassdoor: Many companies have interview questions on Glassdoor. Your goal isn’t to study the interview questions in advance, but you can get a good idea of the general difficulty of the programming questions.
Practice talking while you solve problems: When you feel a bit more prepared, you can do a mock interview to see where you’re standing. Check out Mock Interviews or Pramp. You will receive feedback afterwards with details about what went well and what you need to improve, which will definitely help you for upcoming interviews.
